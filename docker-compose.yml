services:
  chat:
    build:
      context: ./backend/chat  # Ensure this path is correct
    command: 
       bash -c "cd /backend/chat && python manage.py makemigrations && python manage.py migrate && python -u manage.py runserver 0.0.0.0:8008"
    ports:
      - "8008:8008"
    volumes:
      - ./backend:/backend  # Bind-mount the code for live reload
      - ./backend/chat/db:/backend/chat/db
    environment:
      - DEBUG=1
    depends_on: 
      - shop
    container_name: chat

  shop:
    container_name: shop
    build:
      context: ./backend/shop  # Ensure this path is correct
    command: >
       bash -c "cd /backend/shop && python manage.py makemigrations && python manage.py migrate && python -u manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend  # Bind-mount the code for live reload
    environment:
      - DEBUG=1
      - PYTHONUNBUFFERED=1



  microemail:
    container_name: microemail
    build:
      context: ./backend/microemail  # Ensure this path is correct
    volumes:
      - ./backend:/backend  # Bind-mount the backend code
    command: >
      bash -c "cd /backend/microemail && python manage.py run_kafka_consumer"
    environment:
      - DEBUG=1
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
      - shop

    
  kafka-consumer:
    container_name: chat-consumer
    build:
      context: ./backend/chat  # Build the same chat image
    command: >
      bash -c "python manage.py run_kafka_consumer"
    volumes:
      - ./backend:/backend  # Bind-mount the backend code
      - ./backend/chat/db:/backend/chat/db  # Bind-mount the SQLite database directory
    environment:
      - DEBUG=1
    depends_on:
      - kafka
      - chat

  frontend:
    build:
      context: ./reactjs  # Ensure this path is correct
    ports:
      - "3000:3000"
    volumes:
      - ./reactjs:/reactjs
    depends_on:
      - shop
      - chat

  redis-server:
    container_name: redis-server
    image: "redis:alpine"
    command: redis-server
    ports:
      - "6379:6379"


  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Use the Kafka service name here
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - ./kafka-data:/var/lib/kafka/data
      - ./kafka/data/zookeeper_data:/var/lib/zookeeper/data
      - ./kafka/data/zookeeper_log:/var/lib/zookeeper/log

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic email-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic chat-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "


